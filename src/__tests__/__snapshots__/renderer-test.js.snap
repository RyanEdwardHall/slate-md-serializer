// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bold mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "264",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "265",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "bold",
          },
        ],
        "text": "this is bold",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`bold mark inside italic mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "300",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "301",
        "marks": Immutable.Set [],
        "text": "nothing ",
      },
      Immutable.Record {
        "key": "302",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "italic",
          },
        ],
        "text": "italic and ",
      },
      Immutable.Record {
        "key": "303",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "bold",
          },
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "italic",
          },
        ],
        "text": "bold",
      },
      Immutable.Record {
        "key": "304",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "italic",
          },
        ],
        "text": " and",
      },
      Immutable.Record {
        "key": "305",
        "marks": Immutable.Set [],
        "text": " nothing",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`code is not greedy about newlines 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1312",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1313",
        "marks": Immutable.Set [],
        "text": "one sentence",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1314",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1315",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1316",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1317",
        "marks": Immutable.Set [],
        "text": "const hello = 'world';
function() {
  return hello;
}",
      },
    ],
    "type": "code",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1318",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1319",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1320",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1321",
        "marks": Immutable.Set [],
        "text": "two sentence",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`code mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "388",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "389",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "code",
          },
        ],
        "text": "const foo = 123;",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`code mark with escaped characters 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "400",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "401",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "code",
          },
        ],
        "text": "<script>alert('foo')</script>",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`deleted mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "352",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "353",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "deleted",
          },
        ],
        "text": "this is strikethrough",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`does not add extra paragraphs around lists 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "678",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "679",
        "marks": Immutable.Set [],
        "text": "first paragraph",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "680",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "681",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "682",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "683",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "684",
            "marks": Immutable.Set [],
            "text": "list",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "bulleted-list",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "685",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "686",
        "marks": Immutable.Set [],
        "text": "second paragraph",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`does not escape characters inside of code blocks 1`] = `
"\`\`\`
const hello = 'world';
function() {
  return hello;
}
\`\`\`"
`;

exports[`does not escape characters inside of code marks 1`] = `"\`<script>alert('foo')</script>\`"`;

exports[`does not parse marks around code block boundaries 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1280",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1281",
        "marks": Immutable.Set [],
        "text": "This is *not",
      },
    ],
    "type": "code",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1282",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1283",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1284",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1285",
        "marks": Immutable.Set [],
        "text": "hello * bold",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`does not parse marks inside of code blocks 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1264",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1265",
        "marks": Immutable.Set [],
        "text": "This is *not* bold, how about __this__",
      },
    ],
    "type": "code",
  },
]
`;

exports[`handles escaped blocks 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1524",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1525",
        "marks": Immutable.Set [],
        "text": "# text",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`handles escaped blocks 2`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1530",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1531",
        "marks": Immutable.Set [],
        "text": "- text",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`handles escaped blocks 3`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1536",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1537",
        "marks": Immutable.Set [],
        "text": "* text",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`handles escaped marks 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1542",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1543",
        "marks": Immutable.Set [],
        "text": "this is **not bold**",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`handles escaped marks 2`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1548",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1549",
        "marks": Immutable.Set [],
        "text": "this is *not italic*",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`handles escaped marks 3`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1554",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1555",
        "marks": Immutable.Set [],
        "text": "this is [not](a link)",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`handles escaped marks 4`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1560",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1561",
        "marks": Immutable.Set [],
        "text": "this is ![not](an image)",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`headings are not greedy about newlines 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "172",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "173",
        "marks": Immutable.Set [],
        "text": "a paragraph",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "174",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "175",
        "marks": Immutable.Set [],
        "text": "Heading",
      },
    ],
    "type": "heading2",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "176",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "177",
        "marks": Immutable.Set [],
        "text": "another paragraph",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`horizontal rule does not make text above a heading 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "226",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "227",
        "marks": Immutable.Set [],
        "text": "not a heading",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "228",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "229",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "horizontal-rule",
  },
]
`;

exports[`horizontal rule does not make text above a heading 2`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "246",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "247",
        "marks": Immutable.Set [],
        "text": "not a heading",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "248",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "249",
        "marks": Immutable.Set [],
        "text": "===",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`ignores empty link 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1499",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1500",
        "marks": Immutable.Set [],
        "text": "empty",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`inserted mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "364",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "365",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "inserted",
          },
        ],
        "text": "inserted text",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`italic mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "278",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "279",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "italic",
          },
        ],
        "text": "this is italic",
      },
      Immutable.Record {
        "key": "280",
        "marks": Immutable.Set [],
        "text": " ",
      },
      Immutable.Record {
        "key": "281",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "italic",
          },
        ],
        "text": "this is italic too",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`italic mark inside bold mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "328",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "329",
        "marks": Immutable.Set [],
        "text": "nothing ",
      },
      Immutable.Record {
        "key": "330",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "bold",
          },
        ],
        "text": "bold and ",
      },
      Immutable.Record {
        "key": "331",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "italic",
          },
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "bold",
          },
        ],
        "text": "italic",
      },
      Immutable.Record {
        "key": "332",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "bold",
          },
        ],
        "text": " and",
      },
      Immutable.Record {
        "key": "333",
        "marks": Immutable.Set [],
        "text": " nothing",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`maintains multiple empty paragraphs 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "90",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "91",
        "marks": Immutable.Set [],
        "text": "This is the first sentence",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "92",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "93",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "94",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "95",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "96",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "97",
        "marks": Immutable.Set [],
        "text": "Two empty paragraphs above",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses \`\`\` code fences 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1231",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1232",
        "marks": Immutable.Set [],
        "text": "const hello = 'world';
function() {
  return hello;
}",
      },
    ],
    "type": "code",
  },
]
`;

exports[`parses \`\`\` code fences with language 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {
      "language": "javascript",
    },
    "key": "1243",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1244",
        "marks": Immutable.Set [],
        "text": "const hello = 'world';
function() {
  return hello;
}",
      },
    ],
    "type": "code",
  },
]
`;

exports[`parses ~~~ code fences 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1348",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1349",
        "marks": Immutable.Set [],
        "text": "const hello = 'world';
function() {
  return hello;
}",
      },
    ],
    "type": "code",
  },
]
`;

exports[`parses double nested todo list items 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1164",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "checked": true,
        },
        "key": "1165",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1166",
            "marks": Immutable.Set [],
            "text": "checked",
          },
          Immutable.Record {
            "data": Immutable.Map {},
            "key": "1167",
            "nodes": Immutable.List [
              Immutable.Record {
                "data": Immutable.Map {
                  "checked": false,
                },
                "key": "1168",
                "nodes": Immutable.List [
                  Immutable.Record {
                    "key": "1169",
                    "marks": Immutable.Set [],
                    "text": "empty",
                  },
                ],
                "type": "list-item",
              },
              Immutable.Record {
                "data": Immutable.Map {
                  "checked": true,
                },
                "key": "1170",
                "nodes": Immutable.List [
                  Immutable.Record {
                    "key": "1171",
                    "marks": Immutable.Set [],
                    "text": "checked",
                  },
                ],
                "type": "list-item",
              },
            ],
            "type": "todo-list",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "todo-list",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1172",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "checked": false,
        },
        "key": "1173",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1174",
            "marks": Immutable.Set [],
            "text": "three",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "todo-list",
  },
]
`;

exports[`parses empty string 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1512",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1513",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses hashtag 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1375",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1376",
        "marks": Immutable.Set [],
        "text": "this is a ",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "1377",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1378",
            "marks": Immutable.Set [],
            "text": "#hashtag",
          },
        ],
        "type": "hashtag",
      },
      Immutable.Record {
        "key": "1379",
        "marks": Immutable.Set [],
        "text": " example",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses hashtag ignoring dash 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1398",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1399",
        "marks": Immutable.Set [],
        "text": "dash should end ",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "1400",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1401",
            "marks": Immutable.Set [],
            "text": "#hashtag",
          },
        ],
        "type": "hashtag",
      },
      Immutable.Record {
        "key": "1402",
        "marks": Immutable.Set [],
        "text": "-dash",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses heading1 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "117",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "118",
        "marks": Immutable.Set [],
        "text": "Heading",
      },
    ],
    "type": "heading1",
  },
]
`;

exports[`parses heading1 with bold mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "150",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "151",
        "marks": Immutable.Set [],
        "text": "Heading ",
      },
      Immutable.Record {
        "key": "152",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "bold",
          },
        ],
        "text": "bold",
      },
      Immutable.Record {
        "key": "153",
        "marks": Immutable.Set [],
        "text": " not bold",
      },
    ],
    "type": "heading1",
  },
]
`;

exports[`parses heading1 with italic mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "135",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "136",
        "marks": Immutable.Set [],
        "text": "Heading ",
      },
      Immutable.Record {
        "key": "137",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "italic",
          },
        ],
        "text": "italic",
      },
      Immutable.Record {
        "key": "138",
        "marks": Immutable.Set [],
        "text": " not italic",
      },
    ],
    "type": "heading1",
  },
]
`;

exports[`parses heading2 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "120",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "121",
        "marks": Immutable.Set [],
        "text": "Heading",
      },
    ],
    "type": "heading2",
  },
]
`;

exports[`parses heading3 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "123",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "124",
        "marks": Immutable.Set [],
        "text": "Heading",
      },
    ],
    "type": "heading3",
  },
]
`;

exports[`parses heading4 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "126",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "127",
        "marks": Immutable.Set [],
        "text": "Heading",
      },
    ],
    "type": "heading4",
  },
]
`;

exports[`parses heading5 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "129",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "130",
        "marks": Immutable.Set [],
        "text": "Heading",
      },
    ],
    "type": "heading5",
  },
]
`;

exports[`parses heading6 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "132",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "133",
        "marks": Immutable.Set [],
        "text": "Heading",
      },
    ],
    "type": "heading6",
  },
]
`;

exports[`parses horizontal rule 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "200",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "201",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "horizontal-rule",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "202",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "203",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "204",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "205",
        "marks": Immutable.Set [],
        "text": "a paragraph",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses image 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1419",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "src": "http://example.com/logo.png",
          "alt": "example",
        },
        "key": "1420",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1421",
            "marks": Immutable.Set [],
            "text": "",
          },
        ],
        "type": "image",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses indented code blocks 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1360",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1361",
        "marks": Immutable.Set [],
        "text": "const hello = 'world';
function() {
  return hello;
}",
      },
    ],
    "type": "code",
  },
]
`;

exports[`parses indented list items 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "714",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "715",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "716",
            "marks": Immutable.Set [],
            "text": "one",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "717",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "718",
            "marks": Immutable.Set [],
            "text": "two",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "bulleted-list",
  },
]
`;

exports[`parses link 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1435",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "href": "http://google.com",
        },
        "key": "1436",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1437",
            "marks": Immutable.Set [],
            "text": "google",
          },
        ],
        "type": "link",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses link with encoded characters 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1467",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "href": "https://example.com/app/kibana#/discover?_g=(refreshInterval:('$$hashKey':'object:1596',display:'10 seconds',pause:!f,section:1,value:10000),time:(from:now-15m,mode:quick,to:now))&_a=(columns:!(metadata.step,message,metadata.attempt_f,metadata.tries_f,metadata.error_class,metadata.url),index:'logs-',interval:auto,query:(query_string:(analyze_wildcard:!t,query:'metadata.at: Stepper*')),sort:!(time,desc))",
        },
        "key": "1468",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1469",
            "marks": Immutable.Set [],
            "text": "kibana",
          },
        ],
        "type": "link",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses link with percent symbol 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1483",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "href": "https://example.com/app/kibana#/visualize/edit/Requests-%25",
        },
        "key": "1484",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1485",
            "marks": Immutable.Set [],
            "text": "kibana",
          },
        ],
        "type": "link",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses link within mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1451",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "href": "http://google.com",
        },
        "key": "1452",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1453",
            "marks": Immutable.Set [],
            "text": "google",
          },
        ],
        "type": "link",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses list items 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "606",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "607",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "608",
            "marks": Immutable.Set [],
            "text": "one",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "609",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "610",
            "marks": Immutable.Set [],
            "text": "two",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "bulleted-list",
  },
]
`;

exports[`parses list items with marks 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "740",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "741",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "742",
            "marks": Immutable.Set [],
            "text": "one ",
          },
          Immutable.Record {
            "key": "743",
            "marks": Immutable.Set [
              Immutable.Record {
                "data": Immutable.Map {},
                "type": "bold",
              },
            ],
            "text": "bold",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "744",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "745",
            "marks": Immutable.Set [
              Immutable.Record {
                "data": Immutable.Map {},
                "type": "italic",
              },
            ],
            "text": "italic",
          },
          Immutable.Record {
            "key": "746",
            "marks": Immutable.Set [],
            "text": " two",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "bulleted-list",
  },
]
`;

exports[`parses mixed list items 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "862",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "863",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "864",
            "marks": Immutable.Set [],
            "text": "list",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "ordered-list",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "865",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "866",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "867",
            "marks": Immutable.Set [],
            "text": "another",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "bulleted-list",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "868",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "869",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "870",
            "marks": Immutable.Set [],
            "text": "different",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "ordered-list",
  },
]
`;

exports[`parses nested list items 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "635",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "636",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "637",
            "marks": Immutable.Set [],
            "text": "one",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "638",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "639",
            "marks": Immutable.Set [],
            "text": "two",
          },
          Immutable.Record {
            "data": Immutable.Map {},
            "key": "640",
            "nodes": Immutable.List [
              Immutable.Record {
                "data": Immutable.Map {},
                "key": "641",
                "nodes": Immutable.List [
                  Immutable.Record {
                    "key": "642",
                    "marks": Immutable.Set [],
                    "text": "nested",
                  },
                ],
                "type": "list-item",
              },
            ],
            "type": "bulleted-list",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "bulleted-list",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "643",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "644",
        "marks": Immutable.Set [],
        "text": "next para",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses nested todo list items 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1125",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "checked": false,
        },
        "key": "1126",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1127",
            "marks": Immutable.Set [],
            "text": "todo",
          },
          Immutable.Record {
            "data": Immutable.Map {},
            "key": "1128",
            "nodes": Immutable.List [
              Immutable.Record {
                "data": Immutable.Map {
                  "checked": false,
                },
                "key": "1129",
                "nodes": Immutable.List [
                  Immutable.Record {
                    "key": "1130",
                    "marks": Immutable.Set [],
                    "text": "nested",
                  },
                ],
                "type": "list-item",
              },
              Immutable.Record {
                "data": Immutable.Map {
                  "checked": false,
                },
                "key": "1131",
                "nodes": Immutable.List [
                  Immutable.Record {
                    "key": "1132",
                    "marks": Immutable.Set [],
                    "text": "deep",
                  },
                ],
                "type": "list-item",
              },
            ],
            "type": "todo-list",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "todo-list",
  },
]
`;

exports[`parses ordered list items 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "770",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "771",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "772",
            "marks": Immutable.Set [],
            "text": "one",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "773",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "774",
            "marks": Immutable.Set [],
            "text": "two",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "ordered-list",
  },
]
`;

exports[`parses ordered list items with different numbers 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "828",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "829",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "830",
            "marks": Immutable.Set [],
            "text": "one",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "831",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "832",
            "marks": Immutable.Set [],
            "text": "two",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "833",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "834",
            "marks": Immutable.Set [],
            "text": "three",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "ordered-list",
  },
]
`;

exports[`parses ordered list items with marks 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "796",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "797",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "798",
            "marks": Immutable.Set [],
            "text": "one ",
          },
          Immutable.Record {
            "key": "799",
            "marks": Immutable.Set [
              Immutable.Record {
                "data": Immutable.Map {},
                "type": "bold",
              },
            ],
            "text": "bold",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "800",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "801",
            "marks": Immutable.Set [
              Immutable.Record {
                "data": Immutable.Map {},
                "type": "italic",
              },
            ],
            "text": "italic",
          },
          Immutable.Record {
            "key": "802",
            "marks": Immutable.Set [],
            "text": " two",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "ordered-list",
  },
]
`;

exports[`parses paragraph 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "4",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "5",
        "marks": Immutable.Set [],
        "text": "This is just a sentence",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses paragraph with Markdown characters 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "18",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "19",
        "marks": Immutable.Set [],
        "text": "This ",
      },
      Immutable.Record {
        "key": "20",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "bold",
          },
        ],
        "text": "is",
      },
      Immutable.Record {
        "key": "21",
        "marks": Immutable.Set [],
        "text": " a sen-ten-ce",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses quote 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "416",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "417",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "418",
            "marks": Immutable.Set [],
            "text": "this is a quote",
          },
        ],
        "type": "paragraph",
      },
    ],
    "type": "block-quote",
  },
]
`;

exports[`parses quote followed by list with quote (outline/#723) 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "443",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "444",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "445",
            "marks": Immutable.Set [],
            "text": "this is a quote",
          },
        ],
        "type": "paragraph",
      },
    ],
    "type": "block-quote",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "446",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "447",
        "nodes": Immutable.List [
          Immutable.Record {
            "data": Immutable.Map {},
            "key": "448",
            "nodes": Immutable.List [
              Immutable.Record {
                "data": Immutable.Map {},
                "key": "449",
                "nodes": Immutable.List [
                  Immutable.Record {
                    "key": "450",
                    "marks": Immutable.Set [],
                    "text": "this is a list item with a quote",
                  },
                ],
                "type": "paragraph",
              },
            ],
            "type": "block-quote",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "ordered-list",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "451",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "452",
        "nodes": Immutable.List [
          Immutable.Record {
            "data": Immutable.Map {},
            "key": "453",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "454",
                "marks": Immutable.Set [],
                "text": "this is a quote with a list item",
              },
            ],
            "type": "list-item",
          },
          Immutable.Record {
            "data": Immutable.Map {},
            "key": "455",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "456",
                "marks": Immutable.Set [],
                "text": "this is the second list item",
              },
            ],
            "type": "list-item",
          },
        ],
        "type": "ordered-list",
      },
    ],
    "type": "block-quote",
  },
]
`;

exports[`parses quote with newlines and marks 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "499",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "500",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "501",
            "marks": Immutable.Set [],
            "text": "this is a ",
          },
          Immutable.Record {
            "key": "502",
            "marks": Immutable.Set [
              Immutable.Record {
                "data": Immutable.Map {},
                "type": "italic",
              },
            ],
            "text": "quote",
          },
        ],
        "type": "paragraph",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "503",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "504",
            "marks": Immutable.Set [],
            "text": "this is the second part of the quote",
          },
        ],
        "type": "paragraph",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "505",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "506",
            "marks": Immutable.Set [],
            "text": "",
          },
        ],
        "type": "paragraph",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "507",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "508",
            "marks": Immutable.Set [],
            "text": "this is the third part of the quote",
          },
        ],
        "type": "paragraph",
      },
    ],
    "type": "block-quote",
  },
]
`;

exports[`parses tables 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "922",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "923",
        "nodes": Immutable.List [
          Immutable.Record {
            "data": Immutable.Map {
              "align": null,
            },
            "key": "924",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "925",
                "marks": Immutable.Set [],
                "text": "Tables",
              },
            ],
            "type": "table-head",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "center",
            },
            "key": "926",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "927",
                "marks": Immutable.Set [],
                "text": "Are",
              },
            ],
            "type": "table-head",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "right",
            },
            "key": "928",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "929",
                "marks": Immutable.Set [],
                "text": "Cool",
              },
            ],
            "type": "table-head",
          },
        ],
        "type": "table-row",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "930",
        "nodes": Immutable.List [
          Immutable.Record {
            "data": Immutable.Map {
              "align": null,
            },
            "key": "931",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "932",
                "marks": Immutable.Set [],
                "text": "col 1 is",
              },
            ],
            "type": "table-cell",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "center",
            },
            "key": "933",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "934",
                "marks": Immutable.Set [],
                "text": "left-aligned",
              },
            ],
            "type": "table-cell",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "right",
            },
            "key": "935",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "936",
                "marks": Immutable.Set [],
                "text": "$1600",
              },
            ],
            "type": "table-cell",
          },
        ],
        "type": "table-row",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "937",
        "nodes": Immutable.List [
          Immutable.Record {
            "data": Immutable.Map {
              "align": null,
            },
            "key": "938",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "939",
                "marks": Immutable.Set [],
                "text": "col 2 is",
              },
            ],
            "type": "table-cell",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "center",
            },
            "key": "940",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "941",
                "marks": Immutable.Set [],
                "text": "centered",
              },
            ],
            "type": "table-cell",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "right",
            },
            "key": "942",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "943",
                "marks": Immutable.Set [],
                "text": "$12",
              },
            ],
            "type": "table-cell",
          },
        ],
        "type": "table-row",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "944",
        "nodes": Immutable.List [
          Immutable.Record {
            "data": Immutable.Map {
              "align": null,
            },
            "key": "945",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "946",
                "marks": Immutable.Set [],
                "text": "col 3 is",
              },
            ],
            "type": "table-cell",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "center",
            },
            "key": "947",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "948",
                "marks": Immutable.Set [],
                "text": "right-aligned",
              },
            ],
            "type": "table-cell",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "right",
            },
            "key": "949",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "950",
                "marks": Immutable.Set [],
                "text": "$1",
              },
            ],
            "type": "table-cell",
          },
        ],
        "type": "table-row",
      },
    ],
    "type": "table",
  },
]
`;

exports[`parses todo list items 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1098",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "checked": false,
        },
        "key": "1099",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1100",
            "marks": Immutable.Set [],
            "text": "todo",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {
          "checked": true,
        },
        "key": "1101",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1102",
            "marks": Immutable.Set [],
            "text": "done",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "todo-list",
  },
]
`;

exports[`parses todo list items with marks 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1207",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {
          "checked": true,
        },
        "key": "1208",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1209",
            "marks": Immutable.Set [
              Immutable.Record {
                "data": Immutable.Map {},
                "type": "deleted",
              },
            ],
            "text": "done",
          },
        ],
        "type": "list-item",
      },
      Immutable.Record {
        "data": Immutable.Map {
          "checked": true,
        },
        "key": "1210",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "1211",
            "marks": Immutable.Set [],
            "text": "more ",
          },
          Immutable.Record {
            "key": "1212",
            "marks": Immutable.Set [
              Immutable.Record {
                "data": Immutable.Map {},
                "type": "bold",
              },
            ],
            "text": "done",
          },
        ],
        "type": "list-item",
      },
    ],
    "type": "todo-list",
  },
]
`;

exports[`parses two paragraphs 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "38",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "39",
        "marks": Immutable.Set [],
        "text": "This is the first sentence",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "40",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "41",
        "marks": Immutable.Set [],
        "text": "This is the second sentence",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses two paragraphs 2`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "60",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "61",
        "marks": Immutable.Set [],
        "text": "This is the first sentence",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "62",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "63",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "64",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "65",
        "marks": Immutable.Set [],
        "text": "This is the second sentence",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`parses whitespace string 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1518",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1519",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`quote is not greedy about newlines 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "576",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "577",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "578",
            "marks": Immutable.Set [],
            "text": "this is a quote",
          },
        ],
        "type": "paragraph",
      },
    ],
    "type": "block-quote",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "579",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "580",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "581",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "582",
        "marks": Immutable.Set [],
        "text": "this is a paragraph",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`quotes do not get combined 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "541",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "542",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "543",
            "marks": Immutable.Set [],
            "text": "this is a quote",
          },
        ],
        "type": "paragraph",
      },
    ],
    "type": "block-quote",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "544",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "545",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "546",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "547",
        "nodes": Immutable.List [
          Immutable.Record {
            "key": "548",
            "marks": Immutable.Set [],
            "text": "this is a different quote",
          },
        ],
        "type": "paragraph",
      },
    ],
    "type": "block-quote",
  },
]
`;

exports[`tables are not greedy about newlines 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1032",
    "nodes": Immutable.List [
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "1033",
        "nodes": Immutable.List [
          Immutable.Record {
            "data": Immutable.Map {
              "align": null,
            },
            "key": "1034",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "1035",
                "marks": Immutable.Set [],
                "text": "Tables",
              },
            ],
            "type": "table-head",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "center",
            },
            "key": "1036",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "1037",
                "marks": Immutable.Set [],
                "text": "Are",
              },
            ],
            "type": "table-head",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "right",
            },
            "key": "1038",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "1039",
                "marks": Immutable.Set [],
                "text": "Cool",
              },
            ],
            "type": "table-head",
          },
        ],
        "type": "table-row",
      },
      Immutable.Record {
        "data": Immutable.Map {},
        "key": "1040",
        "nodes": Immutable.List [
          Immutable.Record {
            "data": Immutable.Map {
              "align": null,
            },
            "key": "1041",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "1042",
                "marks": Immutable.Set [],
                "text": "col 1 is",
              },
            ],
            "type": "table-cell",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "center",
            },
            "key": "1043",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "1044",
                "marks": Immutable.Set [],
                "text": "left-aligned",
              },
            ],
            "type": "table-cell",
          },
          Immutable.Record {
            "data": Immutable.Map {
              "align": "right",
            },
            "key": "1045",
            "nodes": Immutable.List [
              Immutable.Record {
                "key": "1046",
                "marks": Immutable.Set [],
                "text": "$1600",
              },
            ],
            "type": "table-cell",
          },
        ],
        "type": "table-row",
      },
    ],
    "type": "table",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1047",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1048",
        "marks": Immutable.Set [],
        "text": "",
      },
    ],
    "type": "paragraph",
  },
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "1049",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "1050",
        "marks": Immutable.Set [],
        "text": "a new paragraph",
      },
    ],
    "type": "paragraph",
  },
]
`;

exports[`underlined mark 1`] = `
Immutable.List [
  Immutable.Record {
    "data": Immutable.Map {},
    "key": "376",
    "nodes": Immutable.List [
      Immutable.Record {
        "key": "377",
        "marks": Immutable.Set [
          Immutable.Record {
            "data": Immutable.Map {},
            "type": "underlined",
          },
        ],
        "text": "underlined text",
      },
    ],
    "type": "paragraph",
  },
]
`;
